import winreg
import subprocess
import pandas as pd
import os

# 注册表扫描
def scan_registry():
    registry_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, registry_path)
    items = []
    for i in range(100):
        try:
            name, value = winreg.EnumValue(key, i)
            items.append({"name": name, "value": value})
        except WindowsError:
            break
    winreg.CloseKey(key)
    return items

# BCD解析
def scan_bcd():
    result = subprocess.run(["bcdedit", "/v"], capture_output=True, text=True)
    bcd_items = []
    for line in result.stdout.splitlines():
        if "description" in line:
            bcd_items.append({"description": line.split("description")[1].strip()})
    return bcd_items

# 恶意检测逻辑
def detect_malicious(items):
    malicious = []
    for item in items:
        path = item["value"]
        if not os.path.exists(path):
            malicious.append({"name": item["name"], "path": path, "status": "Invalid Path"})
        elif os.path.isfile(path) and not os.path.isabs(path):
            malicious.append({"name": item["name"], "path": path, "status": "Relative Path"})
        # 其他检测逻辑（如签名验证）
    return malicious

# 生成报告
def generate_report(malicious_items):
    df = pd.DataFrame(malicious_items)
    df.to_csv(r"C:\test\malicious_boot_items.csv", index=False)
    # 生成HTML报告
    # ...

# 主程序
def main():
    registry_items = scan_registry()
    bcd_items = scan_bcd()
    malicious_items = detect_malicious(registry_items + bcd_items)
    generate_report(malicious_items)
    # 显示用户界面提示
    # ...

main()